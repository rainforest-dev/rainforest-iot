---
# System Hardening Playbook for Homelab
- name: Harden Raspberry Pi 5 Security
  hosts: raspberry_pi
  become: yes
  vars:
    allowed_ssh_users: ["rainforest"]
    fail2ban_enabled: true
    ufw_enabled: true
    
  tasks:
    - name: Update all packages
      apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes
        autoclean: yes
        
    - name: Install security packages
      apt:
        name:
          - fail2ban
          - ufw
          - unattended-upgrades
          - logrotate
          - rkhunter
          - chkrootkit
        state: present
        
    # SSH Hardening
    - name: Configure SSH security
      blockinfile:
        path: /etc/ssh/sshd_config
        block: |
          # Security hardening
          PermitRootLogin no
          PasswordAuthentication no
          PubkeyAuthentication yes
          AllowUsers {{ allowed_ssh_users | join(' ') }}
          Protocol 2
          MaxAuthTries 3
          ClientAliveInterval 300
          ClientAliveCountMax 2
        marker: "# {mark} ANSIBLE MANAGED SSH SECURITY"
      notify: restart ssh
      
    # Firewall Configuration
    - name: Configure UFW defaults
      ufw:
        direction: "{{ item.direction }}"
        policy: "{{ item.policy }}"
      loop:
        - { direction: 'incoming', policy: 'deny' }
        - { direction: 'outgoing', policy: 'allow' }
      when: ufw_enabled
      
    - name: Allow SSH
      ufw:
        rule: allow
        port: '22'
        proto: tcp
      when: ufw_enabled
      
    - name: Allow HTTP services
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - '80'      # Homepage
        - '8080'    # Pi-hole
        - '8123'    # HomeAssistant
        - '3000'    # OpenSpeedTest
        - '3001'    # OpenSpeedTest HTTPS
        - '6443'    # K3s API
      when: ufw_enabled
      
    - name: Allow DNS (Pi-hole)
      ufw:
        rule: allow
        port: '53'
        proto: "{{ item }}"
      loop:
        - tcp
        - udp
      when: ufw_enabled
      
    - name: Allow K8s NodePort range
      ufw:
        rule: allow
        port: "30000:32767"
        proto: tcp
      when: ufw_enabled
      
    - name: Enable UFW
      ufw:
        state: enabled
        logging: 'on'
      when: ufw_enabled
      
    # Fail2Ban Configuration
    - name: Configure Fail2Ban for SSH
      copy:
        content: |
          [sshd]
          enabled = true
          port = ssh
          filter = sshd
          logpath = /var/log/auth.log
          maxretry = 3
          bantime = 3600
          findtime = 600
        dest: /etc/fail2ban/jail.local
      notify: restart fail2ban
      when: fail2ban_enabled
      
    # Automatic Updates
    - name: Configure unattended upgrades
      copy:
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Download-Upgradeable-Packages "1";
          APT::Periodic::AutocleanInterval "7";
          APT::Periodic::Unattended-Upgrade "1";
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        
    - name: Configure unattended upgrades settings
      copy:
        content: |
          Unattended-Upgrade::Allowed-Origins {
              "${distro_id}:${distro_codename}";
              "${distro_id}:${distro_codename}-security";
              "${distro_id}ESMApps:${distro_codename}-apps-security";
              "${distro_id}ESM:${distro_codename}-infra-security";
          };
          Unattended-Upgrade::AutoFixInterruptedDpkg "true";
          Unattended-Upgrade::MinimalSteps "true";
          Unattended-Upgrade::Remove-Unused-Dependencies "true";
          Unattended-Upgrade::Automatic-Reboot "false";
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        
    # System Monitoring
    - name: Create system monitoring script
      copy:
        content: |
          #!/bin/bash
          # Homelab system monitoring
          echo "=== System Status $(date) ===" >> /var/log/homelab-status.log
          echo "CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)%" >> /var/log/homelab-status.log
          echo "Memory: $(free | grep Mem | awk '{printf "%.1f%%", $3/$2 * 100.0}')" >> /var/log/homelab-status.log
          echo "Disk: $(df -h / | awk 'NR==2{print $5}')" >> /var/log/homelab-status.log
          echo "Load: $(uptime | awk -F'load average:' '{print $2}')" >> /var/log/homelab-status.log
          echo "Docker: $(docker ps --format 'table {{ "{{" }}.Names{{ "}}" }}\t{{ "{{" }}.Status{{ "}}" }}' 2>/dev/null | wc -l) containers" >> /var/log/homelab-status.log
          echo "K3s: $(k3s kubectl get nodes --no-headers 2>/dev/null | wc -l) nodes" >> /var/log/homelab-status.log
          echo "" >> /var/log/homelab-status.log
        dest: /usr/local/bin/homelab-monitor.sh
        mode: '0755'
        
    - name: Create monitoring cron job
      cron:
        name: "Homelab system monitoring"
        minute: "*/15"
        job: "/usr/local/bin/homelab-monitor.sh"
        
    # Log rotation
    - name: Configure log rotation for homelab
      copy:
        content: |
          /var/log/homelab-status.log {
              daily
              rotate 7
              compress
              delaycompress
              missingok
              notifempty
              create 644 root root
          }
        dest: /etc/logrotate.d/homelab
        
  handlers:
    - name: restart ssh
      systemd:
        name: ssh
        state: restarted
        
    - name: restart fail2ban
      systemd:
        name: fail2ban
        state: restarted
        enabled: yes